import java.util.*;
public class LinkLists {
    public static void main(String[] args) {
    //     LL list = new LL();
    //     list.addFirst(2);
    //     list.addFirst(4);
    //     list.addLast(3);
    //     list.addLast(5);
    //     list.printList();
    //      System.out.println();
    //     list.delFirst();
    //     list.printList();
    //  System.out.println();
    //     list.delLast();
    //     list.printList();
    //     System.out.println();
    //     // // list.delLast();
    //     // // list.printList();
    //     // // System.out.println();
    //     // // list.delLast();
    //     // // list.delLast();
    //     // // // list.printList();
    //     // int n = list.listSize();
    //     // System.out.println(n);
        LinkedList<Integer> x = new LinkedList<Integer>();
        x.add(2);
        x.addFirst(1);
        System.out.println(x);
        x.removeLast();
        System.out.println(x);
        
    }
}

class LL {

    class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    Node head;

    // add first
    public void addFirst(int data) {
        Node newnode = new Node(data);
        if (head == null) {
            head = newnode;
            return;
        }
        newnode.next = head;
        head = newnode;

    }

    // add Last
    public void addLast(int data) {
        Node newnode = new Node(data);
        if (head == null) {
            head = newnode;
            return;
        }
        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newnode;

    }

    // print
    public void printList() {
        Node temp = head;
        if (temp == null)
            System.out.println("list is empty");
        else {
            while (temp != null) {
                System.out.print(temp.data + "->");
                temp = temp.next;
            }
        }
    }

    // delete from begg
    public void delFirst() {
        if (head == null)
            System.out.println("list is sempty");
        else

            head = head.next;

    }

    // delete from begg
    public void delLast() {
        if (head == null) {
            System.out.println("empty hai");
        }
        // when there is only one node and if we do next ka next then it give error
        else if (head.next == null) {
            head = null;
        } else {
            Node currNode = head;
            while (currNode.next.next != null) {
                currNode = currNode.next;
            }
            currNode.next = null;
        }
    }

    // size of link list
    public int listSize() {
        int n = 0;
        if (head == null)
            return 0;
        else {
            Node temp = head;
            while (temp != null) {
                n++;
                temp = temp.next;
            }
            return n;
        }
    }
}
